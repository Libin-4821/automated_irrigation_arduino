/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/9dae11a5-435f-4666-acd6-c55e0e72e5c7

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float soil_Moisture;
  float temperature;
  int crop;
  int soil_Type;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
//#include <WiFi.h>
//#include <WiFi.h>

#include "model.h"

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

//#define DHTPIN 25       // Define the DHT22 data pin
#define DHTPIN D8
#define DHTTYPE DHT22    // DHT22 (AM2302) sensor type

#include "model.h"

// this class will be different if you used another type of classifier, just check the model.h file
Eloquent::ML::Port::RandomForestRegressor regressor;

//const char* ssid = "ZTE_2.4G_xNL6Ln";
//const char* password = "KUrJLtgC";

DHT dht(DHTPIN, DHTTYPE);

float temp;
float hum;

int trigger_level;
bool pump_status;

const int dryval = 715;
const int wetval = 615;

const int growth_no = 1;

int soilMoistureValue;
int soilMoisturePercent;

//#define SENSOR_IN 32
#define SENSOR_IN A0
#define RELAY_OUT D2
//#define RELAY_OUT 26


void onTemperatureChange();
void onHumidityChange();
void onSoilMoistureChange();

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();





  ArduinoCloud.addProperty(temperature, READ, ON_CHANGE, onTemperatureChange);
  ArduinoCloud.addProperty(humidity, READ, ON_CHANGE, onHumidityChange);
  ArduinoCloud.addProperty(soil_Moisture, READ, ON_CHANGE, onSoilMoistureChange);


  dht.begin();


  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);



  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  pinMode(RELAY_OUT, OUTPUT);

  digitalWrite(RELAY_OUT, LOW);

}

void loop() {
  ArduinoCloud.update();

  temp = dht.readTemperature();
  hum = dht.readHumidity();
  delay(1000);

  temperature = temp;
  humidity = hum;

  soilMoistureValue = analogRead(SENSOR_IN);

  soilMoisturePercent = map(soilMoistureValue, dryval, wetval, 0, 100);

  Serial.println(soilMoistureValue);

  soil_Moisture = soilMoisturePercent;


  float x_sample[5] = {float(crop), float(soil_Type), float(growth_no), temperature, humidity};

  Serial.print("Predicted : ");

  trigger_level = regressor.predict(x_sample);
  Serial.println(trigger_level);

  if (soilMoisturePercent < trigger_level) {
    pumpOn();

  } else {
    pumpOff();
  }
}




/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange() {
  float temperatureValue = dht.readTemperature() * 100; // Multiply by 100 to store two decimal places

  temperatureValue = float(temperature) / 100.0;
  //ArduinoCloud.write(temperature, int(temperatureValue));

}


void pumpOn() {
  digitalWrite(RELAY_OUT, HIGH);
  pump_status = true;
}

void pumpOff() {
  digitalWrite(RELAY_OUT, LOW);
  pump_status = false;
}



/*
  Since SoilType is READ_WRITE variable, onSoilTypeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilTypeChange()  {

  // Add your code here to act upon SoilType change
}


/*
  Since Crop is READ_WRITE variable, onCropChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCropChange()  {
  // Add your code here to act upon Crop change
}





/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {

  float humidity = dht.readHumidity();
  // Add your code here to act upon Humidity change
}


/*
  Since SoilMoisture is READ_WRITE variable, onSoilMoistureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoistureChange()  {
  int soilMoistureValue = analogRead(32); // Replace with the correct pin
  //ArduinoCloud.write(soil_Moisture, soilMoistureValue);
  soil_Moisture = soilMoistureValue;
  // Add your code here to act upon SoilMoisture change
}


























